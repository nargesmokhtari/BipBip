# -*- coding: utf-8 -*-
"""RoundKey_K11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17FwRglEpjKoWTqwge67rfsBNR1bvZg90
"""

import os
BBB = [0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0x3e, 0x3c, 0x08, 0x11, 0x0e, 0x17, 0x2b, 0x33, 0x35, 0x2d, 0x19, 0x1c, 0x09, 0x0c, 0x15, 0x13, 0x3d, 0x3b, 0x31, 0x2c, 0x25, 0x38, 0x3a, 0x26, 0x36, 0x2a, 0x34, 0x1d, 0x37, 0x1e, 0x30, 0x1a, 0x0b, 0x21, 0x2e, 0x1f, 0x29, 0x18, 0x0f, 0x3f, 0x10, 0x20, 0x28, 0x05, 0x39, 0x14, 0x24, 0x0a, 0x0d, 0x23, 0x12, 0x27, 0x07, 0x32, 0x1b, 0x2f, 0x16, 0x22]
IBBB = [0x00, 0x01, 0x02, 0x03, 0x04, 0x31, 0x05, 0x3a, 0x08, 0x12, 0x35, 0x26, 0x13, 0x36, 0x0a, 0x2c, 0x2e, 0x09, 0x38, 0x15, 0x33, 0x14, 0x3e, 0x0b, 0x2b, 0x10, 0x25, 0x3c, 0x11, 0x21, 0x23, 0x29, 0x2f, 0x27, 0x3f, 0x37, 0x34, 0x1a, 0x1d, 0x39, 0x30, 0x2a, 0x1f, 0x0c, 0x19, 0x0f, 0x28, 0x3d, 0x24, 0x18, 0x3b, 0x0d, 0x20, 0x0e, 0x1e, 0x22, 0x1b, 0x32, 0x1c, 0x17, 0x07, 0x16, 0x06, 0x2d]
IPI3 = [6, 14, 4, 19, 18, 3, 7, 15, 5, 23, 22, 2, 10, 9, 12, 13, 0, 20, 11, 8, 17, 16, 1, 21]

def IBPL3(x):
    y = [0 for _ in range(24)]
    for i in range(0, 24):
        y[i] = x[IPI3[i]]
    for i in range(0, 24):
        x[i] = y[i]

def ISBL(x):
    IBBB = [0x00, 0x01, 0x02, 0x03, 0x04, 0x31, 0x05, 0x3a, 0x08, 0x12, 0x35, 0x26, 0x13, 0x36, 0x0a, 0x2c, 0x2e,
            0x09, 0x38, 0x15, 0x33, 0x14, 0x3e, 0x0b, 0x2b, 0x10, 0x25, 0x3c, 0x11, 0x21, 0x23, 0x29, 0x2f, 0x27,
            0x3f, 0x37, 0x34, 0x1a, 0x1d, 0x39, 0x30, 0x2a, 0x1f, 0x0c, 0x19, 0x0f, 0x28, 0x3d, 0x24, 0x18, 0x3b,
            0x0d, 0x20, 0x0e, 0x1e, 0x22, 0x1b, 0x32, 0x1c, 0x17, 0x07, 0x16, 0x06, 0x2d]

    a = 0
    i = 0
    j = 0
    for j in range(0, 4):
        i = 6 * j + 5
        a = 1 if x[i] == 1 else 0
        i -= 1
        a <<= 1
        a ^= 1 if x[i] == 1 else 0
        i -= 1
        a <<= 1
        a ^= 1 if x[i] == 1 else 0
        i -= 1
        a <<= 1
        a ^= 1 if x[i] == 1 else 0
        i -= 1
        a <<= 1
        a ^= 1 if x[i] == 1 else 0
        i -= 1
        a <<= 1
        a ^= 1 if x[i] == 1 else 0
        i -= 1
        a = IBBB[a]

        i = 6 * j + 5
        x[i] = (a >> 5) & 1
        i -= 1
        x[i] = (a >> 4) & 1
        i -= 1
        x[i] = (a >> 3) & 1
        i -= 1
        x[i] = (a >> 2) & 1
        i -= 1
        x[i] = (a >> 1) & 1
        i -= 1
        x[i] = a & 1
        i -= 1

def IRFS(x):
    IBPL3(x)
    ISBL(x)

def ISBL_6bits(x):
    IBBB = [0x00, 0x01, 0x02, 0x03, 0x04, 0x31, 0x05, 0x3a, 0x08, 0x12, 0x35, 0x26, 0x13, 0x36, 0x0a, 0x2c, 0x2e,
            0x09, 0x38, 0x15, 0x33, 0x14, 0x3e, 0x0b, 0x2b, 0x10, 0x25, 0x3c, 0x11, 0x21, 0x23, 0x29, 0x2f, 0x27,
            0x3f, 0x37, 0x34, 0x1a, 0x1d, 0x39, 0x30, 0x2a, 0x1f, 0x0c, 0x19, 0x0f, 0x28, 0x3d, 0x24, 0x18, 0x3b,
            0x0d, 0x20, 0x0e, 0x1e, 0x22, 0x1b, 0x32, 0x1c, 0x17, 0x07, 0x16, 0x06, 0x2d]
    a = 0
    i = 5  # Initial bit position for the 6-bit segment
    # Combine bits to form a 6-bit number
    for shift in range(5, -1, -1):
        a <<= 1
        a |= x[i]
        i -= 1
    # Look up the transformed value in the IBBB table
    a = IBBB[a]
    # Replace bits in the input with the transformed value
    i = 5
    for shift in range(5, -1, -1):
        x[i] = (a >> shift) & 1
        i -= 1
def extract_bits(binary_number, indices):
    # Ensure all indices are within the valid range
    if any(index < 0 or index >= len(binary_number) for index in indices):
        raise ValueError("One or more indices are out of range")

    # Extract the bits at the specified indices
    extracted_bits = [int(binary_number[index]) for index in indices]

    # Convert the list of bits to a string
    result = ''.join(map(str, extracted_bits))

    return result

real_k11 = '110000101010000101110101'
selected_indices = [7, 15, 5, 23, 22, 2]
k11_list = []

#Fault1 injected to SBox 2
#0x2
#0x8

output_faulty = '100100101000010101100111'
correct_round_11 = '001001110100101000111100'
k11_list_valid = []

for j in range(2**24):
    k11_list.append(format(j, '024b'))
#k11_list.append(real_k11)

for k11 in k11_list:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid.append(k11)

print("len valid k11 list (Fault1 injected to SBox 2): ",len(k11_list_valid))
if real_k11 in k11_list_valid:
   print('round key k11 found!')

#Fault2 injected to SBox 2
#0x2
#0x8

output_faulty = '101101100110111100110111'
correct_round_11 = '110001111001000100011111'
k11_list_valid2 = []

for k11 in k11_list_valid:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid2.append(k11)

print("len valid k11 list (Fault2 injected to SBox 2): ",len(k11_list_valid2))
if real_k11 in k11_list_valid2:
   print('round key k11 found!')

#Fault3 injected to SBox 2
#0x2
#0x8

output_faulty = '011010011000011101011000'
correct_round_11 = '000100101000010101001011'
k11_list_valid3 = []

for k11 in k11_list_valid2:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid3.append(k11)

print("len valid k11 list (Fault3 injected to SBox 2): ",len(k11_list_valid3))
if real_k11 in k11_list_valid3:
   print('round key k11 found!')

#Fault4 injected to SBox 2
#0x2
#0x8

output_faulty = '010010001101000101000001'
correct_round_11 = '000010000010110111000101'
k11_list_valid4 = []

for k11 in k11_list_valid3:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid4.append(k11)

print("len valid k11 list (Fault4 injected to SBox 2): ",len(k11_list_valid4))
if real_k11 in k11_list_valid4:
   print('round key k11 found!')

#Fault5 injected to SBox 2
#0x2
#0x8

output_faulty = '111001100111101111010110'
correct_round_11 = '011000110101001111010101'
k11_list_valid5 = []

for k11 in k11_list_valid4:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid5.append(k11)

print("len valid k11 list (Fault5 injected to SBox 2): ",len(k11_list_valid5))
if real_k11 in k11_list_valid5:
   print('round key k11 found!')

#Fault6 injected to SBox 2
#0x2
#0x8

output_faulty = '110010100101001011001010'
correct_round_11 = '101111001010111110110011'
k11_list_valid6 = []

for k11 in k11_list_valid5:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid6.append(k11)

print("len valid k11 list (Fault6 injected to SBox 2): ",len(k11_list_valid6))
if real_k11 in k11_list_valid6:
   print('round key k11 found!')

#Fault7 injected to SBox 2
#0x2
#0x8

output_faulty = '011111011100101010001101'
correct_round_11 = '101011011001011110001101'
k11_list_valid7 = []

for k11 in k11_list_valid6:
        result2 = int(k11, 2) ^ int(output_faulty, 2)
        result2_h = format(result2, '024b')
        input_list_faulty = [int(bit) for bit in result2_h]
        IRFS(input_list_faulty)
        output_binary_faulty = ''.join(map(str, input_list_faulty))

        # Permutation round 10
        permutation_round10 = [int(bit) for bit in output_binary_faulty]
        IBPL3(permutation_round10)
        output_permutation_round10 = ''.join(map(str, permutation_round10))

        # Extracting sbox2 6 bits
        sbox2_bits_faulty = output_permutation_round10[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_faulty = output_permutation_round10[12:18]

        result2_c = int(k11, 2) ^ int(correct_round_11, 2)
        result2_h_c = format(result2_c, '024b')
        input_list_correct = [int(bit) for bit in result2_h_c]
        IRFS(input_list_correct)
        output_binary_correct = ''.join(map(str, input_list_correct))

        # Permutation round 10
        permutation_round10_correct = [int(bit) for bit in output_binary_correct]
        IBPL3(permutation_round10_correct)
        output_permutation_round10_correct = ''.join(map(str, permutation_round10_correct))

        # Extracting sbox2 6 bits
        sbox2_bits_correct = output_permutation_round10_correct[6:12]
        # Extracting sbox3 6 bits
        sbox3_bits_correct = output_permutation_round10_correct[12:18]

        # XOR sbox 2
        result_xor = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox2_bits_faulty, sbox2_bits_correct)])
        reversed_result_xor = result_xor[::-1]
        hex_result = hex(int(reversed_result_xor, 2))

        # XOR sbox 3
        result_xor_3 = "".join([str(int(bit1) ^ int(bit2)) for bit1, bit2 in zip(sbox3_bits_faulty, sbox3_bits_correct)])
        reversed_result_xor_3 = result_xor_3[::-1]
        hex_result_3 = hex(int(reversed_result_xor_3, 2))

        if hex_result in ['0x0','0x2', '0x3', '0x6', '0x7', '0xc','0xd','0x10','0x11','0x14','0x15','0x1e','0x1f','0x28','0x29','0x3a','0x3b'] and \
           hex_result_3 in ['0x0','0x1','0x2','0x6','0x8','0xb','0xc','0x10','0x11','0x14','0x1a','0x1b','0x1e','0x22','0x25','0x26','0x28','0x2c','0x2f','0x30','0x34','0x35','0x3a','0x3e','0x3f']:
            k11_list_valid7.append(k11)

print("len valid k11 list (Fault7 injected to SBox 2): ",len(k11_list_valid7))
if real_k11 in k11_list_valid7:
   print('round key k11 found!')